# -*- coding: utf-8 -*-
"""PS1-Noise cancellation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IqoW3ZPhDS1kLSaRFWLG0Mee4a_aFD1U

PART 3   https://codingshiksha.com/python/python-3-matplotlib-script-to-remove-noise-signal-from-mp3-or-wav-file-using-numpy-library-full-project-for-beginners/
"""

#from google.colab import drive
#drive.mount('/content/drive')

"""PLOTTING THE ORIGINAL ONE"""

!pip install librosa

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

filename='/content/MANDOVI-TEST_20140313_140000.wav'

import IPython.display as ipd  #interesting utitlities
import librosa
import librosa.display

plt.figure(figsize=(14,5))   #figure size mentioned
data,sample_rate=librosa.load(filename)    #defining sample rate and data
librosa.display.waveplot(data,sr=sample_rate)  #using librosa library for display  ,,to ease our typing we have shown sample_rate by sr
ipd.Audio(filename)   # this is the file loading the data.

import matplotlib.pyplot as plt
import numpy as np
import wave
import sys
import math
import contextlib

fname = '/content/MANDOVI-TEST_20140313_140000.wav'
outname = '/content/MANDOVI-TEST_20140313_140000 - Copy.wav'

cutOffFrequency = 100.0

# from http://stackoverflow.com/questions/13728392/moving-average-or-running-mean
def running_mean(x, windowSize):
  cumsum = np.cumsum(np.insert(x, 0, 0))
  return (cumsum[windowSize:] - cumsum[:-windowSize]) / windowSize

# from http://stackoverflow.com/questions/2226853/interpreting-wav-data/2227174#2227174
def interpret_wav(raw_bytes, n_frames, n_channels, sample_width, interleaved = True):

    if sample_width == 1:
        dtype = np.uint8 # unsigned char
    elif sample_width == 2:
        dtype = np.int16 # signed 2-byte short
    else:
        raise ValueError("Only supports 8 and 16 bit audio formats.")

    channels = np.fromstring(raw_bytes, dtype=dtype)

    if interleaved:
        # channels are interleaved, i.e. sample N of channel M follows sample N of channel M-1 in raw data
        channels.shape = (n_frames, n_channels)
        channels = channels.T
    else:
        # channels are not interleaved. All samples from channel M occur before all samples from channel M-1
        channels.shape = (n_channels, n_frames)

    return channels

with contextlib.closing(wave.open(fname,'rb')) as spf:
    sampleRate = spf.getframerate()
    ampWidth = spf.getsampwidth()
    nChannels = spf.getnchannels()
    nFrames = spf.getnframes()

    # Extract Raw Audio from multi-channel Wav File

    signal = spf.readframes(nFrames*nChannels)
    spf.close()
    channels = interpret_wav(signal, nFrames, nChannels, ampWidth, True)

    # get window size
    # from http://dsp.stackexchange.com/questions/9966/what-is-the-cut-off-frequency-of-a-moving-average-filter
    freqRatio = (cutOffFrequency/sampleRate)
    N = int(math.sqrt(0.196196 + freqRatio**2)/freqRatio)

    # Use moviung average (only on first channel)
    filtered = running_mean(channels[0], N).astype(channels.dtype)

    wav_file = wave.open(outname, "w")
    wav_file.setparams((1, ampWidth, sampleRate, nFrames, spf.getcomptype(), spf.getcompname()))
    wav_file.writeframes(filtered.tobytes('C'))
    wav_file.close()

# Commented out IPython magic to ensure Python compatibility.
!pip install librosa
import matplotlib.pyplot as plt
# %matplotlib inline
filename='/content/MANDOVI-TEST_20140313_140000 - Copy.wav'
import IPython.display as ipd  #interesting utitlities
import librosa
import librosa.display
plt.figure(figsize=(14,5))   #figure size mentioned
data,sample_rate=librosa.load(filename)    #defining sample rate and data
librosa.display.waveplot(data,sr=sample_rate)  #using librosa library for display  ,,to ease our typing we have shown sample_rate by sr
ipd.Audio(filename)   # this is the file loading the data.